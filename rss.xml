<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Blog - Vertexcover Blog</title>
        <link>https://blog.vertexcover.io</link>
        <description>Blog - Vertexcover Blog</description>
        <lastBuildDate>Mon, 21 Jul 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Teaching Claude Code to Work Independently]]></title>
            <link>https://blog.vertexcover.io/claude-code-context-engineering-v2</link>
            <guid>https://blog.vertexcover.io/claude-code-context-engineering-v2</guid>
            <pubDate>Mon, 21 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[<TldrCallout]]></description>
            <content:encoded><![CDATA[<div style="border:2px solid #ffb300;border-radius:8px;background:#fffbe7;padding:1em;margin:1em 0;box-shadow:0 2px 8px rgba(0,0,0,0.06)"><b style="font-size:1.2em">🧃 TL;DR</b><ul style="margin:0"><li><b>Problem:</b> <!-- -->You're trapped micromanaging Claude Code instead of building</li><li><b>Solution:</b> <!-- -->Train Claude Code once, then let it work autonomously</li><li><b>How it Works:</b> <!-- -->Strategic context engineering: CLAUDE.md files, systematic workflows, and learning capture</li><li><b>Benefit:</b> <!-- -->Claude Code becomes your autonomous teammate</li></ul></div>
<p>Here is <a href="https://gist.github.com/tripathi456/bfaf9add4b70bff131cd574c2f93cfac" target="_blank" rel="noopener noreferrer">CLAUDE.md</a></p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-0-just-moved-from-cursor-to-claude-code">Day 0: Just moved from cursor to claude code<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#day-0-just-moved-from-cursor-to-claude-code" class="hash-link" aria-label="Direct link to Day 0: Just moved from cursor to claude code" title="Direct link to Day 0: Just moved from cursor to claude code">​</a></h2>
<p><em>It's 11 PM on a Tuesday. My token budget just hit zero. Claude Code is asking me the same question for the fourth time: "What coding style does this project use?" I've spent 6 hours being a glorified copy-paste machine, explaining the same context over and over.</em></p>
<p><em>Sound familiar?</em></p>
<p>That night, I realized something critical: <strong>Claude Code is teachable</strong>. But I was the worst teacher on Earth.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-1-fighting-claude-code-the-problem">Day 1: Fighting Claude Code (The Problem)<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#day-1-fighting-claude-code-the-problem" class="hash-link" aria-label="Direct link to Day 1: Fighting Claude Code (The Problem)" title="Direct link to Day 1: Fighting Claude Code (The Problem)">​</a></h2>
<p>Every conversation was Groundhog Day:</p>
<ul>
<li>"What's our testing framework again?"</li>
<li>"How do we name files in this project?"</li>
<li>"What's the deployment process?"</li>
</ul>
<p>I was Claude Code's personal Wikipedia. <strong>This had to change.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-2-the-teaching-template-the-mentor">Day 2: The Teaching Template (The Mentor)<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#day-2-the-teaching-template-the-mentor" class="hash-link" aria-label="Direct link to Day 2: The Teaching Template (The Mentor)" title="Direct link to Day 2: The Teaching Template (The Mentor)">​</a></h2>
<blockquote>
<p>What if Claude Code could remember your project like a team member who's been there for years?</p>
</blockquote>
<p>Instead of explaining everything every time, I wrote a template. The gist is:</p>
<div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Communication: Be concise, reference past learnings from docs/work/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> File Naming: YYYY-MM-DD-[001]-[category]-[summary].md  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Never code without checking docs/work/ for similar past solutions</span><br></span></code></pre></div></div>
<p>That's it. <strong>This eliminated hours of repetitive context.</strong></p>
<div class="my-4"><button class="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md px-2 py-1 -mx-2 -my-1" aria-expanded="false"><svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>See the prompt →</button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="border-l-2 border-gray-200 dark:border-gray-700 pl-4 text-sm"><div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token title important punctuation" style="color:#393A34">#</span><span class="token title important"> Project: [Your Project Name]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Tech Stack &amp; Tooling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Language</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Python 3.11+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Package Manager</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: </span><span class="token code-snippet code keyword" style="color:#00009f">`uv`</span><span class="token plain"> (use </span><span class="token code-snippet code keyword" style="color:#00009f">`uv add &lt;dependency&gt;`</span><span class="token plain">, </span><span class="token code-snippet code keyword" style="color:#00009f">`uv run &lt;script&gt;`</span><span class="token plain">)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Testing</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: pytest with coverage</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Linting</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: ruff + mypy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Systematic File Naming</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Format: </span><span class="token code-snippet code keyword" style="color:#00009f">`YYYY-MM-DD-[001-999]-[category]-[four-word-summary].md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Folder: </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Categories: </span><span class="token code-snippet code keyword" style="color:#00009f">`bug`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`feature`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`task`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`research`</span><span class="token plain"> | </span><span class="token code-snippet code keyword" style="color:#00009f">`learnings`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Examples:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token code-snippet code keyword" style="color:#00009f">`2025-07-18-001-feature-user-authentication-system.md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token code-snippet code keyword" style="color:#00009f">`2025-07-18-002-bug-database-connection-timeout.md`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Communication Style</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Concise</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: No fluff, direct responses</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Evidence-based</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Show, don't just tell</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Contextual</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Reference past learnings from </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token title important punctuation" style="color:#393A34">##</span><span class="token title important"> Planning Protocol</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">1.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Context Gathering</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Check </span><span class="token code-snippet code keyword" style="color:#00009f">`docs/work/`</span><span class="token plain"> for relevant past decisions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">2.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Assumption Documentation</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Explicit assumptions in plan files</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">3.</span><span class="token plain"> </span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token bold content">Execution Gate</span><span class="token bold punctuation" style="color:#393A34">**</span><span class="token plain">: Only proceed after planning is complete</span><br></span></code></pre></div></div></div></div></div>
<p><strong>The transformation was instant.</strong> Claude Code started referencing past decisions, avoiding repeated mistakes, and building on previous work. <strong>It finally felt like working with a teammate.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-3-the-learning-moment---30-context---the-training">Day 3: The Learning Moment - 30% context - (The Training)<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#day-3-the-learning-moment---30-context---the-training" class="hash-link" aria-label="Direct link to Day 3: The Learning Moment - 30% context - (The Training)" title="Direct link to Day 3: The Learning Moment - 30% context - (The Training)">​</a></h2>
<blockquote>
<p>What if Claude Code could learn from every mistake and never repeat it?</p>
</blockquote>
<p>When your context hits 30%, you have one chance to crystallize everything learned. Miss it, and you go back to day 1.</p>
<div class="my-4"><button class="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md px-2 py-1 -mx-2 -my-1" aria-expanded="false"><svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>See the prompt →</button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="border-l-2 border-gray-200 dark:border-gray-700 pl-4 text-sm"><div class="language-md codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-md codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">When context drops below 30%: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">1.</span><span class="token plain"> Document every decision made</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">2.</span><span class="token plain"> List what failed (with code snippets)  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">3.</span><span class="token plain"> Note what worked brilliantly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token list punctuation" style="color:#393A34">4.</span><span class="token plain"> Write handoff notes for next session</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Use the </span><span class="token code-snippet code keyword" style="color:#00009f">`Systematic File Naming`</span><span class="token plain"> given above.</span><br></span></code></pre></div></div></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="day-4-the-autonomous-engineer-the-victory">Day 4: The Autonomous Engineer (The Victory)<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#day-4-the-autonomous-engineer-the-victory" class="hash-link" aria-label="Direct link to Day 4: The Autonomous Engineer (The Victory)" title="Direct link to Day 4: The Autonomous Engineer (The Victory)">​</a></h2>
<p>I saw this tweet - <a href="https://x.com/_svs_/status/1928753160337637726" target="_blank" rel="noopener noreferrer">@svs used Claude Code as an MCP client to write an MCP server</a>.</p>
<p>Something magical discovered: <strong>When put in verifiable workflows, Claude Code started working much better!</strong>:</p>
<ul>
<li>Write code → Run tests → Fix failures → Repeat</li>
<li>Build feature → Deploy to staging → Check logs → Iterate</li>
<li>Analyze data → Generate insights → Verify against sources → Summarize</li>
</ul>
<p><strong>I wasn't micromanaging anymore. I was collaborating.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stories-from-other-folks">Stories from other folks<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#stories-from-other-folks" class="hash-link" aria-label="Direct link to Stories from other folks" title="Direct link to Stories from other folks">​</a></h2>
<p>Met awesome folks at <a href="https://hasgeek.com/fifthelephant/2025/" target="_blank" rel="noopener noreferrer">Fifth Elephant Conference</a> where we shared claude code learnings.</p>
<div class="relative bg-emerald-50 bg-opacity-30 dark:bg-emerald-950 dark:bg-opacity-10 rounded-xl p-6 my-8 border-2 border-emerald-200 dark:border-emerald-800"><div class="absolute top-0 right-0 w-12 h-12 overflow-hidden"><div class="absolute top-0 right-0 w-0 h-0 border-l-12 border-b-12 border-l-transparent border-b-emerald-200 dark:border-b-emerald-800"></div></div><div class="flex items-center gap-3 mb-4"><div class="flex-shrink-0 w-10 h-10 bg-emerald-100 dark:bg-emerald-900 dark:bg-opacity-30 rounded-full flex items-center justify-center"><svg class="w-5 h-5 text-emerald-600 dark:text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg></div><div><div class="text-xs font-medium text-emerald-700 dark:text-emerald-300 uppercase tracking-wide">Pro Tips from</div><a href="https://www.linkedin.com/in/codingnirvana/" target="_blank" rel="noopener noreferrer" class="text-lg font-semibold text-emerald-900 dark:text-emerald-100 hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors">Rajesh</a></div></div><div class="border-l-4 border-emerald-300 dark:border-emerald-700 pl-4 text-gray-700 dark:text-gray-300"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-token-budget-hack-that-doubled-my-productivity">The Token Budget Hack That Doubled My Productivity<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#the-token-budget-hack-that-doubled-my-productivity" class="hash-link" aria-label="Direct link to The Token Budget Hack That Doubled My Productivity" title="Direct link to The Token Budget Hack That Doubled My Productivity">​</a></h3><p>Rajesh was burning through tokens like crazy at his startup. Then he discovered something weird about Claude's <a href="https://support.anthropic.com/en/articles/11145838-using-claude-code-with-your-pro-or-max-plan" target="_blank" rel="noopener noreferrer">5-hour windows</a>.</p><p><strong>His discovery:</strong> Start sessions at 7 AM instead of 9 AM.</p><p>Why? The overlapping windows create a "double token zone" during peak hours:</p><p><strong>Before:</strong> 9am-2pm, 2pm-7pm (standard)<br>
<strong>After:</strong> 7am-12pm, 12pm-5pm, 5pm-10pm (overlapping)</p><p><strong>Result:</strong> Between 9am-5pm = <strong>double tokens available</strong></p><img src="https://blog.vertexcover.io/img/timeline.svg"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-csv-strategy-that-saved-hours">The CSV Strategy That Saved Hours<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#the-csv-strategy-that-saved-hours" class="hash-link" aria-label="Direct link to The CSV Strategy That Saved Hours" title="Direct link to The CSV Strategy That Saved Hours">​</a></h3><p>Rajesh's team was dealing with lots of data analysis requests. CSV files everywhere. Claude kept hitting context limits trying to process raw data.</p><p><strong>The breakthrough:</strong> Stop feeding Claude data. Feed it scripts.</p><p><strong>Old way:</strong> "Here's a 10MB CSV, analyze it"<br>
<strong>New way:</strong> "Write a script to analyze this CSV type, then run it"</p><p><strong>Why it works:</strong> Scripts are tiny. Results are focused. Claude guides itself using its own analysis output.</p></div></div>
<div class="relative bg-emerald-50 bg-opacity-30 dark:bg-emerald-950 dark:bg-opacity-10 rounded-xl p-6 my-8 border-2 border-emerald-200 dark:border-emerald-800"><div class="absolute top-0 right-0 w-12 h-12 overflow-hidden"><div class="absolute top-0 right-0 w-0 h-0 border-l-12 border-b-12 border-l-transparent border-b-emerald-200 dark:border-b-emerald-800"></div></div><div class="flex items-center gap-3 mb-4"><div class="flex-shrink-0 w-10 h-10 bg-emerald-100 dark:bg-emerald-900 dark:bg-opacity-30 rounded-full flex items-center justify-center"><svg class="w-5 h-5 text-emerald-600 dark:text-emerald-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg></div><div><div class="text-xs font-medium text-emerald-700 dark:text-emerald-300 uppercase tracking-wide">Pro Tips from</div><a href="https://www.shelfradar.ai/" target="_blank" rel="noopener noreferrer" class="text-lg font-semibold text-emerald-900 dark:text-emerald-100 hover:text-emerald-700 dark:hover:text-emerald-300 transition-colors">Ashwin</a></div></div><div class="border-l-4 border-emerald-300 dark:border-emerald-700 pl-4 text-gray-700 dark:text-gray-300"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-accidental-discovery-that-changed-everything">The Accidental Discovery That Changed Everything<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#the-accidental-discovery-that-changed-everything" class="hash-link" aria-label="Direct link to The Accidental Discovery That Changed Everything" title="Direct link to The Accidental Discovery That Changed Everything">​</a></h3><p>Ashwin was debugging a frustrating session. In a moment of rage, he accidentally hit ESC four times.</p><p><strong>What happened next blew his mind.</strong></p><p>Claude Code showed him a prompt history he'd never seen before. Every conversation. Every context. <strong>Time travel for developers.</strong></p><p><strong>The magic combo:</strong> ESC + ESC + ESC + ESC = Prompt history navigation</p><p><strong>Game changer:</strong> You can resurrect any previous session state instantly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="claude-code-as-your-database-whisperer">Claude Code as Your Database Whisperer<a href="https://blog.vertexcover.io/claude-code-context-engineering-v2#claude-code-as-your-database-whisperer" class="hash-link" aria-label="Direct link to Claude Code as Your Database Whisperer" title="Direct link to Claude Code as Your Database Whisperer">​</a></h3><p>At ShelfRadar, Ashwin deployed Claude Code as their internal SQL agent.</p><p><strong>The setup:</strong> Claude Code + database schema = autonomous query optimizer</p><p><strong>The result:</strong></p><ul>
<li>Ad-hoc queries refined automatically</li>
<li>Schema changes don't break queries</li>
<li>Claude evolves with your database</li>
</ul></div></div>
<p><strong>The question isn't whether Claude Code is teachable.</strong><br>
<strong>The question is: Are you ready to become its teacher?</strong></p>
<p>Update 1: Claude code introduced hooks. Here is a short collection of hooks that I find useful for my workflow.</p>
<ol>
<li>bash script to notify the end of claude code turns.</li>
</ol>
<div class="my-4"><button class="inline-flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 rounded-md px-2 py-1 -mx-2 -my-1" aria-expanded="false"><svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>Full bash script →</button><div class="overflow-hidden transition-all duration-300 ease-in-out max-h-0 opacity-0"><div class="border-l-2 border-gray-200 dark:border-gray-700 pl-4 text-sm"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Read hook input data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">INPUT=$(cat)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SESSION_DIR=$(basename "$(pwd)")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Extract message from transcript if available</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TRANSCRIPT_PATH=$(echo "$INPUT" | jq -r '.transcript_path')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ -f "$TRANSCRIPT_PATH" ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  MSG=$(tail -10 "$TRANSCRIPT_PATH" |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jq -r 'select(.message.role == "assistant") | .message.content[0].text' |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tail -1 | tr '\n' ' ' | cut -c1-60)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  MSG=${MSG:-"Task completed"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  MSG="Task completed"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Show Linux desktop notification (requires notify-send)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">notify-send "Claude Code ($SESSION_DIR) Done" "$MSG"</span><br></span></code></pre></div></div></div></div></div>
<div class="relative bg-blue-50 bg-opacity-30 dark:bg-blue-950 dark:bg-opacity-10 rounded-xl p-6 my-8 border-2 border-blue-200 dark:border-blue-800"><div class="flex items-center gap-3 mb-4"><div class="flex-shrink-0 w-10 h-10 bg-blue-100 dark:bg-blue-900 dark:bg-opacity-30 rounded-full flex items-center justify-center"><svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg></div><div><h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 m-0">Useful Claude Code Hooks &amp; Scripts</h3></div></div><div class="space-y-4"><div class="space-y-3"><h4 class="text-sm font-semibold text-gray-900 dark:text-gray-100 mb-2">Related Links</h4><div class="space-y-2"><div class="border-l-4 border-blue-300 dark:border-blue-700 pl-4"><a href="https://gist.github.com/glennmatlin/fadc41edc3bb9ff68ff9cfa5d6b8aca7" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 font-medium transition-colors">Making Claude use uv instead of pip</a><p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Script for making Claude use uv package manager instead of pip</p></div><div class="border-l-4 border-blue-300 dark:border-blue-700 pl-4"><a href="https://conductor.build/" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 font-medium transition-colors">Running multiple Claude Code sessions in parallel</a><p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Using git worktrees for parallel Claude Code sessions</p></div><div class="border-l-4 border-blue-300 dark:border-blue-700 pl-4"><a href="https://www.reddit.com/r/ClaudeAI/comments/1loodjn/claude_code_now_supports_hooks/" target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200 font-medium transition-colors">Claude Code Hooks Discussion</a><p class="text-sm text-gray-600 dark:text-gray-400 mt-1">Reddit discussion about Claude Code hooks support</p></div></div></div></div></div>
<hr>
<p><em>This revolution moves fast. By the time you read this, someone's already teaching Claude Code to do things we haven't imagined yet.</em></p>
<p><strong>Further Reading:</strong></p>
<ul>
<li><a href="https://manus.im/blog/Context-Engineering-for-AI-Agents-Lessons-from-Building-Manus" target="_blank" rel="noopener noreferrer">Context Engineering by Manus</a></li>
<li><a href="https://southbridge-research.notion.site/claude-code-an-agentic-cleanroom-analysis" target="_blank" rel="noopener noreferrer">Hrishi's Claude Code Analysis</a></li>
</ul>]]></content:encoded>
            <category>Context Engineering</category>
        </item>
        <item>
            <title><![CDATA[AI for End-to-End Tests (Mobile too!) with Auto Healing]]></title>
            <link>https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile</link>
            <guid>https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile</guid>
            <pubDate>Thu, 10 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[AI for End-to-End Tests (Mobile too!)]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ai-agent-for-end-to-end-testing-to-deliver-flawless-digital-experiences">AI Agent for End-to-End Testing to Deliver Flawless Digital Experiences<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#ai-agent-for-end-to-end-testing-to-deliver-flawless-digital-experiences" class="hash-link" aria-label="Direct link to AI Agent for End-to-End Testing to Deliver Flawless Digital Experiences" title="Direct link to AI Agent for End-to-End Testing to Deliver Flawless Digital Experiences">​</a></h3>
<hr>
<p>What if Ai Agent could write tests for your codebase? End-to-end? and for mobile too? and it auto heals / auto-adjusts when your codebase changes?</p>
<p>We share nuggets we learnt while building an AI Agent to solve one of the most persistent challenges in software development: making UI test automation accessible, reliable, and scalable across platforms and devices.</p>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The Problem<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#the-problem" class="hash-link" aria-label="Direct link to The Problem" title="Direct link to The Problem">​</a></h3>
<p>Test automation has historically been:</p>
<ul>
<li><strong>Too technical</strong>: requiring code expertise</li>
<li><strong>Time-consuming</strong>: for authoring and maintaining scripts</li>
<li><strong>Platform-limited</strong>: with fragmented support for web vs. mobile</li>
<li><strong>Fragile</strong>: breaking with minor UI changes or incomplete user flows</li>
</ul>
<p>Existing tools were not built for the demands of today's fast-moving, multi-platform development cycles. They struggled particularly with hybrid apps, dynamic interfaces, and gesture-driven experiences.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-solution-ai-agent">The Solution: AI Agent<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#the-solution-ai-agent" class="hash-link" aria-label="Direct link to The Solution: AI Agent" title="Direct link to The Solution: AI Agent">​</a></h3>
<p>AI agent designed from the ground up as an intelligent, prompt-driven automation system with key capabilities:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="natural-language-to-automation-code">Natural Language to Automation Code<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#natural-language-to-automation-code" class="hash-link" aria-label="Direct link to Natural Language to Automation Code" title="Direct link to Natural Language to Automation Code">​</a></h3>
<p>Users describe test scenarios in plain English. It translates them into precise, executable test scripts—including test data, validations, and edge cases.</p>
<p><img decoding="async" loading="lazy" alt="flow-diagram" src="https://blog.vertexcover.io/assets/images/flow-diagram-b9d7f678148f33fff9a88c8de46b1e3e.png" width="3840" height="1242" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="web--mobile-app-testing">Web &amp; Mobile App Testing<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#web--mobile-app-testing" class="hash-link" aria-label="Direct link to Web &amp; Mobile App Testing" title="Direct link to Web &amp; Mobile App Testing">​</a></h3>
<p>Supports both web (Selenium, Playwright) and mobile (Appium) frameworks, making it one of the few solutions that bridges the gap between platforms seamlessly.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="multi-language-support">Multi-Language Support<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#multi-language-support" class="hash-link" aria-label="Direct link to Multi-Language Support" title="Direct link to Multi-Language Support">​</a></h3>
<p>Generates scripts in Java, Python, JavaScript, and other frameworks—tailored to the team's existing tech stack.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="smart-debugging">Smart Debugging<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#smart-debugging" class="hash-link" aria-label="Direct link to Smart Debugging" title="Direct link to Smart Debugging">​</a></h3>
<p>Executes each script line in real-time as it's generated, identifying and correcting issues on the fly.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cross-device-execution">Cross-Device Execution<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#cross-device-execution" class="hash-link" aria-label="Direct link to Cross-Device Execution" title="Direct link to Cross-Device Execution">​</a></h3>
<p>Run tests instantly across 5,000+ combinations of real browsers and devices (when connected to cloud infrastructure).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="self-healing-automation">Self-Healing Automation<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#self-healing-automation" class="hash-link" aria-label="Direct link to Self-Healing Automation" title="Direct link to Self-Healing Automation">​</a></h3>
<p>Detects and updates selectors and steps automatically as the application evolves, eliminating the need for manual maintenance.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="core-technical-challenges-solved">Core Technical Challenges Solved<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#core-technical-challenges-solved" class="hash-link" aria-label="Direct link to Core Technical Challenges Solved" title="Direct link to Core Technical Challenges Solved">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ui-automation-for-flutter-web-and-hybrid-mobile-apps">UI Automation for Flutter Web and Hybrid Mobile Apps<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#ui-automation-for-flutter-web-and-hybrid-mobile-apps" class="hash-link" aria-label="Direct link to UI Automation for Flutter Web and Hybrid Mobile Apps" title="Direct link to UI Automation for Flutter Web and Hybrid Mobile Apps">​</a></h3>
<p>Most automation tools break down on platforms like Flutter Web, where the UI is rendered inside a <code>&lt;canvas&gt;</code> instead of standard HTML elements, and on hybrid apps without accessible DOM trees.</p>
<p><strong>Our agent solved this by enabling interaction with non-standard UIs using a combination of visual, contextual, and heuristic techniques</strong>—delivering true end-to-end automation where no other solution worked.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="accurate-and-reusable-script-generation">Accurate and Reusable Script Generation<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#accurate-and-reusable-script-generation" class="hash-link" aria-label="Direct link to Accurate and Reusable Script Generation" title="Direct link to Accurate and Reusable Script Generation">​</a></h3>
<p>Running LLMs for every test execution is expensive and error-prone.</p>
<p>This AI Agent implemented a <strong>novel templating and generation system</strong> that decouples script generation from execution. This allowed:</p>
<ul>
<li>Complete and correct scripts on the first pass</li>
<li>Reusability across test runs and frameworks</li>
<li>Fast, low-cost, scalable test creation</li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="complex-gestures-and-ui-behaviors">Complex Gestures and UI Behaviors<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#complex-gestures-and-ui-behaviors" class="hash-link" aria-label="Direct link to Complex Gestures and UI Behaviors" title="Direct link to Complex Gestures and UI Behaviors">​</a></h3>
<p>Simulating gestures like pinch, zoom, drag-and-drop, or multi-touch is notoriously hard—especially in custom components.</p>
<p>This agent provided <strong>fine-grained control</strong> over gesture simulation, going beyond the abstractions of typical libraries, enabling accurate testing of sliders, carousels, maps, and more.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mapping-natural-language-to-ui-actions-reliably">Mapping Natural Language to UI Actions Reliably<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#mapping-natural-language-to-ui-actions-reliably" class="hash-link" aria-label="Direct link to Mapping Natural Language to UI Actions Reliably" title="Direct link to Mapping Natural Language to UI Actions Reliably">​</a></h3>
<p>Natural language like “Click the Pay button” can be ambiguous—especially in large, dynamic UIs.</p>
<p><strong>Being very smart, it combined multiple modalities—DOM structure, visual layout, and semantic cues</strong>—to reliably identify elements even when conventional locators failed. This enabled it to handle vague prompts and incomplete context with high precision.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stability-in-dynamic--incomplete-user-flows">Stability in Dynamic &amp; Incomplete User Flows<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#stability-in-dynamic--incomplete-user-flows" class="hash-link" aria-label="Direct link to Stability in Dynamic &amp; Incomplete User Flows" title="Direct link to Stability in Dynamic &amp; Incomplete User Flows">​</a></h3>
<p>In real-world apps, pop-ups appear unexpectedly, elements load asynchronously, and flows can be interrupted.</p>
<p>It was was designed to <strong>recover intelligently</strong> from such cases using retry logic, timeout strategies, and partial flow handling. This brought production-grade resilience to end-to-end test execution.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scalable-evaluation--debugging-infrastructure">Scalable Evaluation &amp; Debugging Infrastructure<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#scalable-evaluation--debugging-infrastructure" class="hash-link" aria-label="Direct link to Scalable Evaluation &amp; Debugging Infrastructure" title="Direct link to Scalable Evaluation &amp; Debugging Infrastructure">​</a></h3>
<p>A major limitation of LLM-based systems is the lack of robust evaluation.</p>
<p>AI Agent addressed this by building a <strong>custom evaluation framework</strong> that:</p>
<ul>
<li>Validated script correctness at each step</li>
<li>Enabled partial re-execution of scripts</li>
<li>Provided fine-grained feedback for model improvement</li>
</ul>
<p>This drastically accelerated iteration speed and allowed for deeper validation of system accuracy.</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://blog.vertexcover.io/ai-agent-end-to-end-automated-tests-mobile#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>AI Agent redefines what's possible in test automation. By combining the reasoning power of LLMs with robust engineering for execution, gesture control, and UI resilience, it makes test automation accessible to non-engineers while retaining power for experts.</p>
<p>From tackling the hardest UI platforms like Flutter Web to enabling precise, reusable test generation and execution at scale, our custom AI agent is a leap forward in the world of quality engineering.</p>
<p>It's not just a tool—it's a full-stack AI agent that understands, adapts, and evolves with your application.</p>]]></content:encoded>
            <category>AI Agents</category>
            <category>End-to-End Test</category>
        </item>
    </channel>
</rss>